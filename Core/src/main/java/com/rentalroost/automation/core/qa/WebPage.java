package com.rentalroost.automation.core.qa;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import org.openqa.selenium.By;import org.openqa.selenium.ElementNotVisibleException;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.NoSuchElementException;import org.openqa.selenium.WebDriver;import com.thoughtworks.selenium.webdriven.WebDriverBackedSelenium;import org.openqa.selenium.WebElement;import org.openqa.selenium.support.FindBy;import org.openqa.selenium.support.PageFactory;import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;import org.openqa.selenium.support.pagefactory.ElementLocatorFactory;import org.openqa.selenium.support.ui.ExpectedCondition;import org.openqa.selenium.support.ui.Wait;import org.openqa.selenium.support.ui.WebDriverWait;import org.testng.Reporter;import com.rentalroost.automation.core.qa.utils.ReadFlags;public abstract class WebPage<T> {	protected WebPage parent;	protected WebDriver driver;	protected WebDriverBackedSelenium wbDriverSel;	protected JavascriptExecutor js;	protected Wait<WebDriver> wait;	protected ReadFlags flag;	protected List<WebElement> expectedElements = new ArrayList<WebElement>();	protected WebElement expectedElement;	protected int DRIVER_WAIT = 120; // 30 seconds	protected final long explicitWait = 120;	protected String pageName;	private static final int WAIT_FOR_ELEMENT_PAUSE_LENGTH = 50;		@FindBy(xpath="id('logo')/a/img")	private WebElement logoImageLink;		@FindBy(xpath="id('globalnav')/ul/li[1]/a")	private WebElement whatIsHouserieLink;	@FindBy(xpath="id('globalnav')/ul/li[2]/a")	private WebElement howItWorksLink;		@FindBy(xpath="id('globalnav')/ul/li[3]/a")	private WebElement landlordsLink;		@FindBy(xpath="id('globalnav')/ul/li[4]/a")	private WebElement tenantsLink;		@FindBy(xpath="id('globalnav')/ul/li[5]/a")	private WebElement blogsLink;			@FindBy(id="myacc1")	private WebElement myAccountDropArrow;		@FindBy(xpath="//a[contains(@href, '/users/sign_out')]")	private WebElement signOutLink;		@FindBy(xpath="//a[contains(text(),'Messages')]")	private WebElement messageLink;		@FindBy(xpath="//a[contains(text(),'My Orders')]")	private WebElement myorderLink;		public void clickMyAccountDropArrow(){		myAccountDropArrow.click();		try {			Thread.sleep(1500);		} catch (InterruptedException e) {			e.printStackTrace();		}	}		public void clickSignOutLink(){		signOutLink.click();	}		public void clickMessageLink(){		messageLink.click();	}		public void clickMyOrderLink(){		myorderLink.click();	}		public void clickLogoImageLink(){		logoImageLink.click();	}		public void clickWhatIsHouserieLink(){		whatIsHouserieLink.click();	}		public void clickHowItWorksLink(){		howItWorksLink.click();	}		public void clickLandlordsLink(){		landlordsLink.click();	}		public void clickTenantsLink(){		tenantsLink.click();	}		public void clickBlogsLink(){		blogsLink.click();	}	public WebPage(WebDriver driver) {		this.driver = driver;		js = (JavascriptExecutor) driver;		wait = new WebDriverWait(driver, 60);		flag = ReadFlags.getInstnace();		ElementLocatorFactory finder = new AjaxElementLocatorFactory(driver, DRIVER_WAIT);		PageFactory.initElements(finder, this);		waitUntilAllElementsAreLoaded();		Log("<br>[ON PAGE]: " + getCurrentPageName());	}	public WebPage(WebDriverBackedSelenium wbDriverSel) {		this.wbDriverSel = wbDriverSel;	}	public WebPage(WebDriver driver, WebDriverBackedSelenium wbDriverSel) {		this.driver = driver;		this.wbDriverSel = wbDriverSel;		js = (JavascriptExecutor) driver;		wait = new WebDriverWait(driver, 4000);	}	/*	 * 	 * The following method gives the ability to swithFrames.	 */	public void switchFrame(String frameId) {		this.driver.switchTo().frame(frameId);	}	/*	 * 	 * The following method can be used to go back to the body.	 */	public void backToBody() {		this.driver.switchTo().defaultContent();	}	public WebElement waitForAnElement(final By by) {		return (WebElement) (wait.until(new ExpectedCondition<WebElement>() {			public WebElement apply(WebDriver d) {				return d.findElement(by);			}		}));	}		public ExpectedCondition<WebElement> waitForAnElementGetDisplay(final By by) {				return visibilityOfElementLocated(waitForAnElement(by));	}	public ExpectedCondition<WebElement> visibilityOfElementLocated(final WebElement expctedElement) {		ExpectedCondition elementIsVisible = new ExpectedCondition<Boolean>() {			public Boolean apply(WebDriver d) {				expctedElement.isDisplayed(); 				return Boolean.valueOf(true);				//} 				//else					//return Boolean.valueOf(false);							}		};		Wait waitForElement = new WebDriverWait(this.driver, 30);		waitForElement.until(elementIsVisible);		return elementIsVisible;	}	public void visibilityOfElementsLocated(List<WebElement> expectedElements) {		Iterator<WebElement> webElement = expectedElements.iterator();		while (webElement.hasNext()) {			if (visibilityOfElementLocated(webElement.next()) == null)				break;		}	}	public boolean isElementVisible(final By locator) {		try {			driver.findElement(locator);		} catch (NoSuchElementException e) {			return false;		}		return true;	}	public boolean isElementVisible(WebElement expectedElement) {		return expectedElement.isDisplayed() ? true : false;	}	public void waitForElementsToDisappear(final By byElementCriteria) {		long end = System.currentTimeMillis() + explicitWait;		while (System.currentTimeMillis() < end) {			if (!elementIsDisplayed(byElementCriteria)) {				break;			}			waitABit(WAIT_FOR_ELEMENT_PAUSE_LENGTH);		}		if (elementIsDisplayed(byElementCriteria)) {			throw new ElementNotVisibleException("Element should not be displayed displayed: "			+ byElementCriteria);		}	}	public void waitABit(final long timeInMilliseconds) {		try {			Thread.sleep(timeInMilliseconds);		} catch (InterruptedException e) {			Log("[ERROR]: Wait Interrupted");		}	}	public boolean elementIsDisplayed(final By byElementCriteria) {		boolean isDisplayed = false;		List<WebElement> matchingElements = driver.findElements(byElementCriteria);		if (matchingElements.isEmpty()) {			return false;		}		isDisplayed =  matchingElements.get(0).isDisplayed();		return isDisplayed;	}	public final void waitUntilAllElementsAreLoaded() {		visibilityOfElementsLocated(pageElementsToWait());	}	private String getCurrentPageName() {		return setPageName();	}	public abstract List<WebElement> pageElementsToWait();	public void Log(String statement) {		Reporter.log(statement);	}	public abstract String setPageName();}